
name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push Docker images
      env:
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        docker-compose build
        docker-compose push

    - name: Deploy to server
      env:
        PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
        HOST: ${{ secrets.SERVER_HOST }}
        USER: ${{ secrets.SERVER_USER }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          cd /var/www/mediamasses-dev &&
          git pull origin main &&
          echo "POSTGRES_USER=${POSTGRES_USER}" > .env &&
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env &&
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env &&
          echo "DATABASE_URL=${DATABASE_URL}" >> .env &&
          docker-compose pull &&
          docker-compose up -d
        '



















# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - dev
#       - prod

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup SSH and rsync
#         run: sudo apt-get install -y sshpass

#       - name: Prepare server directory and Sync files
#         env:
#           SERVER_IP: ${{ secrets.SERVER_IP }}
#           SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
#           SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
#         run: |
#           ENV_FOLDER="mediamasses-$(echo $GITHUB_REF | sed 's/refs\/heads\///')"
#           sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP "mkdir -p /var/www/$ENV_FOLDER && chown -R root:root /var/www/$ENV_FOLDER && chmod -R 755 /var/www/$ENV_FOLDER"
#           sshpass -p $SERVER_PASSWORD rsync -av --rsh="ssh -o StrictHostKeyChecking=no" ./ $SERVER_USERNAME@$SERVER_IP:/var/www/$ENV_FOLDER

#       - name: Deploy using Docker Compose
#         env:
#           SERVER_IP: ${{ secrets.SERVER_IP }}
#           SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
#           SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
#         run: |
#           ENV_FOLDER="mediamasses-$(echo $GITHUB_REF | sed 's/refs\/heads\///')"
#           if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
#             DOCKER_COMPOSE_FILE=docker-compose-prod.yml
#           else
#             DOCKER_COMPOSE_FILE=docker-compose-dev.yml
#           fi
#           sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP << EOF
#             cd /var/www/$ENV_FOLDER
#             docker compose -f $DOCKER_COMPOSE_FILE down
#             docker compose -f $DOCKER_COMPOSE_FILE up --build -d
#           EOF

#       - name: Check Container Status
#         env:
#           SERVER_IP: ${{ secrets.SERVER_IP }}
#           SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
#           SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
#         run: |
#           ENV_FOLDER="mediamasses-$(echo $GITHUB_REF | sed 's/refs\/heads\///')"
#           if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
#             DOCKER_COMPOSE_FILE=docker-compose-prod.yml
#           else
#             DOCKER_COMPOSE_FILE=docker-compose-dev.yml
#           fi
#           sshpass -p $SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_IP << EOF
#             cd /var/www/$ENV_FOLDER
#             docker compose -f $DOCKER_COMPOSE_FILE ps
#           EOF
